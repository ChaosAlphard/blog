<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>JavaScript on Ilirus</title><link>https://chaosalphard.github.io/tags/javascript/</link><description>Recent content in JavaScript on Ilirus</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Mon, 05 Aug 2019 22:24:12 +0000</lastBuildDate><atom:link href="https://chaosalphard.github.io/tags/javascript/index.xml" rel="self" type="application/rss+xml"/><item><title>Webpack中CSS样式的处理</title><link>https://chaosalphard.github.io/p/webpack%E4%B8%ADcss%E6%A0%B7%E5%BC%8F%E7%9A%84%E5%A4%84%E7%90%86/</link><pubDate>Mon, 05 Aug 2019 22:24:12 +0000</pubDate><guid>https://chaosalphard.github.io/p/webpack%E4%B8%ADcss%E6%A0%B7%E5%BC%8F%E7%9A%84%E5%A4%84%E7%90%86/</guid><description>CSS样式的处理 安装css-loader和style-loader
yarn add css-loader style-loader -D 在index.js中引入.css文件
require(&amp;#39;./index.css&amp;#39;) 在webpack.config.js中配置css模块
module.exports = { mode: &amp;#39;development&amp;#39;, entry: &amp;#39;./src/index.js&amp;#39;, output: { filename: &amp;#39;bundle.[hash:4].js&amp;#39;, path: path.resolve(__dirname, &amp;#39;dist&amp;#39;) }, devServer: { // ... }, plugins: [ // ... ], // 模块 module: { // 规则 rules: [ { // 匹配.css 结尾的文件 test: /\.css$/, // 可用字符串, 也可用对象 // loader的顺序默认是从 右往左/下到上 执行 // css-loader, 解析@import语法 // style-loader, 把css 插入到head标签中 use: [ { loader: &amp;#39;style-loader&amp;#39;, options: { // 在顶部插入 insertAt: &amp;#39;top&amp;#39; } }, &amp;#39;css-loader&amp;#39; ] }, {// 也可以处理less文件 test: /\.</description></item><item><title>Webpack配置HTML Template</title><link>https://chaosalphard.github.io/p/webpack%E9%85%8D%E7%BD%AEhtml-template/</link><pubDate>Sat, 03 Aug 2019 19:25:57 +0000</pubDate><guid>https://chaosalphard.github.io/p/webpack%E9%85%8D%E7%BD%AEhtml-template/</guid><description>Webpack配置HTML template 安装html-webpack-plugin
yarn add html-webpack-plugin -D :: or npm install html-webpack-plugin -D 配置webpack
// 引入html-webpack-plugin模块 const HtmlWebpackPlugin = require(&amp;#39;html-webpack-plugin&amp;#39;) module.exports = { mode: &amp;#39;development&amp;#39;, entry: &amp;#39;./src/index.js&amp;#39;, output: { // bundle.[hash].js: 给打包的文件追加hash // 可指定长度: [hash:&amp;lt;length&amp;gt;] filename: &amp;#39;bundle.[hash:4].js&amp;#39;, path: path.resolve(__dirname, &amp;#39;dist&amp;#39;) }, devServer: { port: 3000, progress: true, contentBase: &amp;#39;./dev&amp;#39;, compress: true }, // 插件 plugins: [ new HtmlWebpackPlugin({ // 模版文件路径 template: &amp;#39;./src/index.html&amp;#39;, // 打包后的文件名字 filename: &amp;#39;index.</description></item><item><title>Webpack的安装与配置</title><link>https://chaosalphard.github.io/p/webpack%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</link><pubDate>Fri, 21 Jun 2019 23:22:15 +0000</pubDate><guid>https://chaosalphard.github.io/p/webpack%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</guid><description>webpack 是一个现代 JavaScript 应用程序的静态模块打包器(module bundler)。当 webpack 处理应用程序时，它会递归地构建一个依赖关系图(dependency graph)，其中包含应用程序需要的每个模块，然后将所有这些模块打包成一个或多个 bundle。
安装Webpack :: 初始化 yarn init :: 安装webpack 和 webpack-cli :: -D表示是开发依赖, 上线时不需要 yarn add webpack webpack-cli -D 配置Webpack 从 Webpack v4.0.0 开始，可以不用引入配置文件。然而，webpack 仍然还是高度可配置的。
Webpack 默认配置文件名为 webpack.config.js或webpackfile.js。
也可以在启动时使用 &amp;ndash;config 参数指定配置文件名称
// 引入path模块 (自带, 无需安装) const path = require(&amp;#39;path&amp;#39;) // 导出配置模块 module.exports = { // 打包模式 默认有两种 production|development // production: 生产模式 // development: 开发模式 mode: &amp;#39;development&amp;#39;, // 入口文件 entry: &amp;#39;.</description></item><item><title>ES6中的尾递归</title><link>https://chaosalphard.github.io/p/es6%E4%B8%AD%E7%9A%84%E5%B0%BE%E9%80%92%E5%BD%92/</link><pubDate>Sat, 01 Jun 2019 15:29:46 +0000</pubDate><guid>https://chaosalphard.github.io/p/es6%E4%B8%AD%E7%9A%84%E5%B0%BE%E9%80%92%E5%BD%92/</guid><description>假设要用JavaScript实现一个阶乘函数，很容易想到用递归实现:
function factorial(n) { if(n === 1) { return 1 } return n * factorial(n-1) } console.log(factorial(4)) // 24 在上述代码中，由于最后一步返回了一个表达式(n * factorial(n-1))，所以会保留n这个变量和函数factorial(n-1)的调用位置等信息，从而形成一层层的调用帧。
递归十分消耗内存，因为要同时保存非常多个调用记录，容易出现&amp;quot;栈溢出&amp;quot;错误(Stack Overflow)
尾调用 尾调用是指的一个函数的最后一个动作是返回另一个函数的调用
function foo(n) { return meh(n) } // 并不一定要在函数尾部，只要是最后一步操作即可 // 以下meh 和nco 函数均属于尾调用 function foo(n) { if(n&amp;gt;0) { return meh(n) } return nco(n) } 不属于尾调用的情况
// 函数调用后还有赋值操作，所以不属于尾调用，即使语义一样 function foo(n) { let tmp = meh(n) return tmp } // 函数调用后还有相加操作 function foo(n) { return meh(n) + 1 } // 没有返回函数调用 function foo(n) { meh(n) } 尾调用优化 　函数调用会在内存形成一个&amp;quot;调用记录&amp;quot;，又称&amp;quot;调用帧&amp;quot; (call frame)，保存调用位置和内部变量等信息。如果在函数A的内部调用函数B，那么在A的调用帧上方，还会形成一个B的调用帧。等到B运行结束，将结果返回到A，B的调用帧才会消失。如果函数B内部还调用函数C，那就还有一个C的调用帧，以此类推。所有的调用帧，就形成一个&amp;quot;调用栈&amp;quot; (call stack)。</description></item><item><title>Vue Router的安装与使用</title><link>https://chaosalphard.github.io/p/vue-router%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/</link><pubDate>Fri, 25 Jan 2019 00:10:10 +0000</pubDate><guid>https://chaosalphard.github.io/p/vue-router%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/</guid><description>Vue Router 的基本用法 安装Vue路由 vue add @vue/router :: 或者 npm install vue-router -S yarn add vue-router 引入路由 写在main.js文件中
// 引入Router import Router from &amp;#39;vue-router&amp;#39;; // 引入路由跳转的组件 import Home from &amp;#39;./components/Home&amp;#39;; // 配置Router const router = new VueRouter({ // 路由模式 (hash | history | abstract(如果没有发现浏览器API, 会自动进入此模式)) // 使用history模式可以去掉地址栏的&amp;#39;#&amp;#39;字符, 但需要后端配置支持 // history 模式利用window.history API 来完成页面的跳转而无需重新加载页面 mode: &amp;#39;history&amp;#39;, base: process.env.BASE_URL, routes: [ { path: &amp;#39;/&amp;#39;, name: &amp;#39;home&amp;#39;, component: Home }, { path: &amp;#39;/about&amp;#39;, name: &amp;#39;about&amp;#39;, component: () =&amp;gt; import(&amp;#39;.</description></item><item><title>使用Vue-cli搭建Vue项目</title><link>https://chaosalphard.github.io/p/%E4%BD%BF%E7%94%A8vue-cli%E6%90%AD%E5%BB%BAvue%E9%A1%B9%E7%9B%AE/</link><pubDate>Mon, 10 Dec 2018 12:20:20 +0000</pubDate><guid>https://chaosalphard.github.io/p/%E4%BD%BF%E7%94%A8vue-cli%E6%90%AD%E5%BB%BAvue%E9%A1%B9%E7%9B%AE/</guid><description>使用Vue-cli搭建Vue项目 安装Vue-cli 在安装Vue-cli之前需要先安装node环境以及npm包管理工具
安装好之后可以通过以下命令查看版本
:: 查看node版本 node -v :: 查看npm版本 npm -v 全局安装Vue-cli
npm install @vue/cli -g :: 或者 yarn global add @vue/cli 安装后使用vue --version来查看版本
运行以下命令在当前文件夹下创建一个项目
:: 命令行创建项目 vue create &amp;lt;projectName&amp;gt; :: 使用可视化项目创建工具 vue ui 创建完成后，进入到刚才创建的文件夹下，运行npm run serve即可启动项目
项目结构 &amp;lt;projectName&amp;gt; ├─node_modules ├─public │ └─index.html ├─src │ ├─assets │ ├─components │ ├─App.vue │ └─main.js └package.json package.json 用于记录项目依赖的库 assets 用于存放静态资源，比如图片 components 用于存放组件 App.vue 根组件 main.js 项目入口脚本 写一个Hello World 写在vue文件中
&amp;lt;!-- 模板: html结构 --&amp;gt; &amp;lt;!</description></item></channel></rss>