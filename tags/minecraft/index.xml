<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Minecraft on Ilirus</title><link>https://chaosalphard.github.io/tags/minecraft/</link><description>Recent content in Minecraft on Ilirus</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sun, 06 Jun 2021 02:44:16 +0800</lastBuildDate><atom:link href="https://chaosalphard.github.io/tags/minecraft/index.xml" rel="self" type="application/rss+xml"/><item><title>Minecraft Mod 开发手册04: 合成表与掉落物</title><link>https://chaosalphard.github.io/p/minecraft-mod-%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C04-%E5%90%88%E6%88%90%E8%A1%A8%E4%B8%8E%E6%8E%89%E8%90%BD%E7%89%A9/</link><pubDate>Sun, 06 Jun 2021 02:44:16 +0800</pubDate><guid>https://chaosalphard.github.io/p/minecraft-mod-%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C04-%E5%90%88%E6%88%90%E8%A1%A8%E4%B8%8E%E6%8E%89%E8%90%BD%E7%89%A9/</guid><description>添加合成表 在resources/data/&amp;lt;你的Mod注册的命名空间&amp;gt;/recipes 文件夹下，创建一个json 文件，名称没有要求，但最好以被添加合成表的物品的名称为前缀。
添加无序合成表 以mod_icon 为例
mod_icon.json
{ // 指定该合成表为无序合成 &amp;#34;type&amp;#34;: &amp;#34;minecraft:crafting_shapeless&amp;#34;, // 指定合成需要的原料, 物品名字格式为 &amp;lt;命名空间&amp;gt;:&amp;lt;物品名称&amp;gt; &amp;#34;ingredients&amp;#34;: [{ &amp;#34;item&amp;#34;: &amp;#34;minecraft:melon_slice&amp;#34; }, { &amp;#34;item&amp;#34;: &amp;#34;minecraft:carrot&amp;#34; }, { &amp;#34;item&amp;#34;: &amp;#34;minecraft:sweet_berries&amp;#34; }, { &amp;#34;item&amp;#34;: &amp;#34;minecraft:pumpkin_pie&amp;#34; }, { &amp;#34;item&amp;#34;: &amp;#34;minecraft:honey_bottle&amp;#34; }, { &amp;#34;item&amp;#34;: &amp;#34;minecraft:milk_bucket&amp;#34; }], // 指定合成结果 &amp;#34;result&amp;#34;: { &amp;#34;item&amp;#34;: &amp;#34;irs_widget_pack:mod_icon&amp;#34;, &amp;#34;count&amp;#34;: 4 } } 给mod_icon 添加第二个合成表
mod_icon_from_mod_icon_block.json
{ &amp;#34;type&amp;#34;: &amp;#34;minecraft:crafting_shapeless&amp;#34;, &amp;#34;ingredients&amp;#34;: [{ &amp;#34;item&amp;#34;: &amp;#34;irs_widget_pack:mod_icon_block&amp;#34; }], &amp;#34;result&amp;#34;: { &amp;#34;item&amp;#34;: &amp;#34;irs_widget_pack:mod_icon&amp;#34;, &amp;#34;count&amp;#34;: 8 } } 添加有序合成表 以mod_icon_block 为例</description></item><item><title>Minecraft Mod 开发手册03: 第一个方块</title><link>https://chaosalphard.github.io/p/minecraft-mod-%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C03-%E7%AC%AC%E4%B8%80%E4%B8%AA%E6%96%B9%E5%9D%97/</link><pubDate>Sat, 05 Jun 2021 22:42:08 +0800</pubDate><guid>https://chaosalphard.github.io/p/minecraft-mod-%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C03-%E7%AC%AC%E4%B8%80%E4%B8%AA%E6%96%B9%E5%9D%97/</guid><description>新建方块 class ModIconBlock: Block(settings) { companion object { // 使用木板的方块预设 val settings: Settings = Settings.of(Material.WOOD) // 方块硬度 .strength(2.0F) // 方块声音 .sounds(BlockSoundGroup.WOOD); // 方块实例 val INSTANCE = ModIconBlock(); // 方块的物品形式实例 val ITEM_INSTANCE = BlockItem(instance, Item.Settings().rarity(Rarity.RARE).group(ModItemGroup.ITEM)); val identifier = Identifier(&amp;#34;irs_widget_pack&amp;#34;, &amp;#34;mod_icon_block&amp;#34;) } } 注册方块 @Suppress(&amp;#34;unused&amp;#34;) fun init() { // 创建方块标识，方块注册完成后还需要注册物品形式的物品标识 Registry.register(Registry.BLOCK, ModIconBlock.identifier, ModIconBlock.INSTANCE) Registry.register(Registry.ITEM, ModIconBlock.identifier, ModIconBlock.ITEM_INSTANCE) } 给方块添加材质 添加材质文件 在resources/assets/&amp;lt;你的Mod注册的命名空间&amp;gt;/textures/block 文件夹下，创建一个与你添加物品同名的png 文件。
配置方块状态 在resources/assets/&amp;lt;你的Mod注册的命名空间&amp;gt;/blockstates 文件夹下，创建一个与你添加物品同名的json 文件。</description></item><item><title>Minecraft Mod 开发手册02: 新建物品栏分组</title><link>https://chaosalphard.github.io/p/minecraft-mod-%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C02-%E6%96%B0%E5%BB%BA%E7%89%A9%E5%93%81%E6%A0%8F%E5%88%86%E7%BB%84/</link><pubDate>Sun, 23 May 2021 23:01:27 +0800</pubDate><guid>https://chaosalphard.github.io/p/minecraft-mod-%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C02-%E6%96%B0%E5%BB%BA%E7%89%A9%E5%93%81%E6%A0%8F%E5%88%86%E7%BB%84/</guid><description>注册物品栏分组 新建一个类，用于存放自定义的物品栏分组的实例
class ModItemGroup { companion object { @JvmStatic val ITEM: ItemGroup = FabricItemGroupBuilder .build(Identifier(&amp;#34;irs_widget_pack&amp;#34;,&amp;#34;item&amp;#34;)) { ItemStack(ModIcon.instance) } } } FabricItemGroupBuilder.build方法接收两个参数，第一个是物品栏分组的名称，第二个是显示的图标
将物品放入自定义物品栏中 修改之前定义好的物品
@JvmStatic val settings: Settings = Settings() // 物品分组修改为我们自定义的分组 .group(ModItemGroup.ITEM) 添加翻译 修改之前的语言文件，按照对应的格式，为新增的物品分组添加翻译
{ &amp;#34;itemGroup.irs_widget_pack.item&amp;#34;: &amp;#34;物品&amp;#34; } 进入游戏，即可看到效果 成果</description></item><item><title>Minecraft Mod 开发手册01: 第一个物品</title><link>https://chaosalphard.github.io/p/minecraft-mod-%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C01-%E7%AC%AC%E4%B8%80%E4%B8%AA%E7%89%A9%E5%93%81/</link><pubDate>Fri, 21 May 2021 21:13:06 +0000</pubDate><guid>https://chaosalphard.github.io/p/minecraft-mod-%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C01-%E7%AC%AC%E4%B8%80%E4%B8%AA%E7%89%A9%E5%93%81/</guid><description>向Minecraft中添加物品 定位入口 找到fabric.mod.json 文件中entrypoints.main 键所对应的类
{ // ... &amp;#34;entrypoints&amp;#34;: { &amp;#34;main&amp;#34;: [ &amp;#34;com.ilirus.widget.pack.WidgetPackKt::init&amp;#34; ] }, // ... } 我这里的值是com.ilirus.widget.pack.WidgetPackKt::init，说明com.ilirus.widget.pack 包下WidgetPack.kt 类中的init 方法是Mod的入口
WidgetPack.kt
@Suppress(&amp;#34;unused&amp;#34;) fun init() { println(&amp;#34;Hello Minecraft!&amp;#34;) } 可以看到init 方法里面什么都没有，不过这个类之后会用到，所以先记下来
新建物品 新建一个class，继承net.minecraft.item.Item 类，Item类的构造器接收一个参数类型为Settings 类的参数，这个Settings 类是Item 的内部类。
Settings 类可以对Item 的属性进行配置。
class ModIcon(settings: Settings) : Item(settings) { companion object { val settings: Settings = Settings() // 物品分组, 配置物品出现在创造模式物品栏的哪一个选项卡中 .group(ItemGroup.MISC) // 此物品作为合成材料参与合成后返回的物品, // 比如牛奶桶参与合成后会返回铁桶 // .recipeRemainder(Items.HONEYCOMB) // 稀有度 (物品名的颜色) .</description></item><item><title>Minecraft Mod 开发手册00: 开发环境搭建</title><link>https://chaosalphard.github.io/p/minecraft-mod-%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C00-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</link><pubDate>Thu, 20 May 2021 00:02:00 +0000</pubDate><guid>https://chaosalphard.github.io/p/minecraft-mod-%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C00-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</guid><description>Fabric开发环境搭建 Minecraft目前有Forge和Fabric两大Mod平台，这里我选择使用较新的Fabric平台。
开发工具 jdk8以上 任意IDE 创建项目 下载Fabric官方的项目初始模板，Kotlin开发人员可以下载Kotlin版 修改gradle.properties 文件 修改maven_group 为你的组织名(类似于Maven中的GroupId) 修改archives_base_name 为你的模组名(类似于Maven中的ArtifactId) 修改minecraft_version 为你的模组的目标版本(你要为哪个Minecraft版本开发Mod) 修改yarn_mappings、loader_version 与fabric_version 为minecraft_version 对应的版本，版本对应关系可在这里查看 修改src目录下的目录名称，对应到你的maven_group与archives_base_name 修改src/resources/fabric.mod.json id 为你的模组的命名空间 entrypoints.main 为你的模组的入口(main方法所在类) mixins 为mixins.json 所在位置 修改&amp;lt;modid&amp;gt;.mixins.json(modid为你的模组的命名空间, fabric.mod.json中id对应的值) package 为mixin所在的包名 client 为mixin的类名 最后，将修改好的项目导入到你的IDE中 修改Gradle构建编译器(可选) 如果你使用的是IntelliJ IDEA, 它默认使用Gradle来构建你的项目，而这在Fabric中是不必要的，通过以下步骤来使你的IntelliJ IDEA使用自己的编译器
在Build Tools -&amp;gt; Gradle 设置项中，修改Build and run using 以及Run tests using 选项为IntelliJ IDEA 在Project Structure -&amp;gt; Project 设置项中，修改Project compiler output 为$PROJECT_DIR$/out 启动Minecraft 在Gradle任务中执行runClient 即可启动Minecraft客户端</description></item></channel></rss>