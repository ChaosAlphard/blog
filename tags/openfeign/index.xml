<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>OpenFeign on Ilirus</title><link>https://chaosalphard.github.io/tags/openfeign/</link><description>Recent content in OpenFeign on Ilirus</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sun, 29 Mar 2020 22:50:00 +0000</lastBuildDate><atom:link href="https://chaosalphard.github.io/tags/openfeign/index.xml" rel="self" type="application/rss+xml"/><item><title>[笔记]SpringCloud学习10: OpenFeign超时配置与日志记录</title><link>https://chaosalphard.github.io/p/%E7%AC%94%E8%AE%B0springcloud%E5%AD%A6%E4%B9%A010-openfeign%E8%B6%85%E6%97%B6%E9%85%8D%E7%BD%AE%E4%B8%8E%E6%97%A5%E5%BF%97%E8%AE%B0%E5%BD%95/</link><pubDate>Sun, 29 Mar 2020 22:50:00 +0000</pubDate><guid>https://chaosalphard.github.io/p/%E7%AC%94%E8%AE%B0springcloud%E5%AD%A6%E4%B9%A010-openfeign%E8%B6%85%E6%97%B6%E9%85%8D%E7%BD%AE%E4%B8%8E%E6%97%A5%E5%BF%97%E8%AE%B0%E5%BD%95/</guid><description>设置超时时间 在application.yml中
# 设置超时时间ribbon:# 指与服务器建立链接的超时时间(单位: ms)ConnectTimeout:1000# 指与服务器建立链接之后，从服务器读取到可用资源所花时间ReadTimeout:5000配置日志输出 OpenFeign有4个日志级别
NONE: 不输出任何日志 BASIC: 仅记录请求方法、URL、响应状态吗以及执行时间 HEADERS: 除了BASIC中的信息外，还记录请求和响应的头信息 FULL: 输出所有信息 编写配置类
package com.ilirus.springcloud.config; import feign.Logger; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; @Configuration public class OpenFeignConfig { @Bean Logger.Level feignLoggerLevel() { return Logger.Level.FULL; } } 在application.yml中配置控制台日志输出级别</description></item><item><title>[笔记]SpringCloud学习09: OpenFeign服务调用</title><link>https://chaosalphard.github.io/p/%E7%AC%94%E8%AE%B0springcloud%E5%AD%A6%E4%B9%A009-openfeign%E6%9C%8D%E5%8A%A1%E8%B0%83%E7%94%A8/</link><pubDate>Sun, 29 Mar 2020 03:07:11 +0000</pubDate><guid>https://chaosalphard.github.io/p/%E7%AC%94%E8%AE%B0springcloud%E5%AD%A6%E4%B9%A009-openfeign%E6%9C%8D%E5%8A%A1%E8%B0%83%E7%94%A8/</guid><description>Feign 简介 Feign是一个声明式的WebService客户端。它的出现使开发WebService客户端变得很简单。使用Feign只需要创建一个接口加上对应的注解。
Feign 是一种声明式、模板化的HTTP 客户端。在SpringCloud 中使用Feign，可以做到使用HTTP 请求访问远程服务，就像调用本地方法一样的，开发者完全感知不到这是在调用远程方法，更感知不到在访问HTTP 请求。
Feign 和 OpenFeign OpenFeign在Feign的基础上支持了SpringMVC的注解。
在OpenFeign中，除了自身提供的注解之外，还支持使用JAX-RS注解，或者SpringMVC注解。
OpenFeign的@FeignClient注解可以解析SpringMVC的@RequestMapping注解下的接口，并通过动态代理的方式产生实现类，实现类中做负载均衡并调用其他服务。
OpenFeign同样使用声明式方式定义Web服务客户端，其次，OpenFeign还可以通过集成Ribbon或Eureka来实现负载均衡的HTTP 客户端。
OpenFeign 的使用 在服务消费方的pom.xml中，引入以下依赖
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-cloud-starter-openfeign&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; 创建相应的Service接口
package com.ilirus.springcloud.service; import com.ilirus.springcloud.entities.CommonResult; import com.ilirus.springcloud.entities.Payment; import org.springframework.cloud.openfeign.FeignClient; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.PathVariable; // value为服务提供方在Eureka中注册的名称 // RequestMapping为提供方对应的请求地址 @FeignClient(value = &amp;#34;irs-provider-payment&amp;#34;) public interface PaymentFeignService { @GetMapping(&amp;#34;/payment/query/{id}&amp;#34;) public CommonResult&amp;lt;Payment&amp;gt; getPaymentByID(@PathVariable(&amp;#34;id&amp;#34;) Long id); } 创建Controller
package com.ilirus.springcloud.controller; import com.ilirus.springcloud.entities.CommonResult; import com.ilirus.springcloud.entities.Payment; import com.ilirus.springcloud.enums.Status; import com.ilirus.springcloud.service.PaymentFeignService; import lombok.extern.slf4j.Slf4j; import org.</description></item></channel></rss>