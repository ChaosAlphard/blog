<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Maven on Ilirus</title><link>https://chaosalphard.github.io/categories/maven/</link><description>Recent content in Maven on Ilirus</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Thu, 12 Mar 2020 17:16:24 +0000</lastBuildDate><atom:link href="https://chaosalphard.github.io/categories/maven/index.xml" rel="self" type="application/rss+xml"/><item><title>Maven中dependencyManagement元素的使用</title><link>https://chaosalphard.github.io/p/maven%E4%B8%ADdependencymanagement%E5%85%83%E7%B4%A0%E7%9A%84%E4%BD%BF%E7%94%A8/</link><pubDate>Thu, 12 Mar 2020 17:16:24 +0000</pubDate><guid>https://chaosalphard.github.io/p/maven%E4%B8%ADdependencymanagement%E5%85%83%E7%B4%A0%E7%9A%84%E4%BD%BF%E7%94%A8/</guid><description>dependencyManagement元素的使用 使用dependencyManagement元素能让所有在子项目中引用一个依赖而不用显式的列出版本号，Maven会沿父子层向上查找，直到找到一个拥有dependencyManagement元素的项目，然后它就会使用这个dependencyManagement中指定的版本号
例如在父项目中:
&amp;lt;dependencyManagement&amp;gt; &amp;lt;dependencies&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;mysql&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;mysql-connector-java&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;8.0.14&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;/dependencies&amp;gt; &amp;lt;/dependencyManagement&amp;gt; 在子项目里:
&amp;lt;dependencies&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;mysql&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;mysql-connector-java&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;/dependencies&amp;gt; 这样做的好处是，如果多个子项目都引用同一个依赖，则可以统一对子项目依赖进行管理版本
如果某个子项目需要另一个版本，那么只需要在那个子项目依赖中声明version即可
&amp;lt;dependencies&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;mysql&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;mysql-connector-java&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;5.1.48&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;/dependencies&amp;gt; 父项目中的dependencyManagement里只是声明依赖，并不实现引入，因此子项目需要显式声明需要用的依赖。 如果需要所有子项目都继承某个依赖，则需要在父项目中使用dependencies，需要注意的是dependencies要放在dependencyManagement上方 如果不在子项目中声明依赖，则不会从父项目中继承，只有在子项目中声明了依赖，且没有指定具体版本，才会从父项目中继承，并且version和scope都读取自父pom文件 如果子项目中指定了版本号，那么会使用子项目中指定的jar版本</description></item></channel></rss>