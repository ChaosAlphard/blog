<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>SpringBoot on Ilirus</title><link>https://chaosalphard.github.io/categories/springboot/</link><description>Recent content in SpringBoot on Ilirus</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sun, 10 Jan 2021 08:02:12 +0000</lastBuildDate><atom:link href="https://chaosalphard.github.io/categories/springboot/index.xml" rel="self" type="application/rss+xml"/><item><title>使用ControllerAdvice统一封装Controller返回数据</title><link>https://chaosalphard.github.io/p/%E4%BD%BF%E7%94%A8controlleradvice%E7%BB%9F%E4%B8%80%E5%B0%81%E8%A3%85controller%E8%BF%94%E5%9B%9E%E6%95%B0%E6%8D%AE/</link><pubDate>Sun, 10 Jan 2021 08:02:12 +0000</pubDate><guid>https://chaosalphard.github.io/p/%E4%BD%BF%E7%94%A8controlleradvice%E7%BB%9F%E4%B8%80%E5%B0%81%E8%A3%85controller%E8%BF%94%E5%9B%9E%E6%95%B0%E6%8D%AE/</guid><description>在给前端提供Api接口时，通常会约定好一个统一返回格式，这样方便前端处理返回结果
@RestController @RequestMapping(&amp;#34;/index&amp;#34;) public class IndexController { @GetMapping public R&amp;lt;Data&amp;gt; index() { return R.ofSuccess(new Data()); } } 但每次都要用统一返回类手动封装一次再返回还是比较麻烦的，可以使用@ControllerAdvice 注解来进行统一封装，避免每次手动封装
定义ControllerAdvice
// 这里的annotations = ApiResult.class 代表只有在类上有@ApiResult 注解的Controller 才会被处理 // 如果不写则默认对所有Controller 进行处理 @RestControllerAdvice(annotations = ApiResult.class) public class ResponseAdvice implements ResponseBodyAdvice&amp;lt;Object&amp;gt; { @Override public boolean supports(MethodParameter returnType, Class&amp;lt;? extends HttpMessageConverter&amp;lt;?&amp;gt;&amp;gt; converterType) { // 判断返回类型是否已经是定义好的统一返回类型, 以及@ApiResult 注解是否启用 // 返回true 则表示进入下一步处理, 返回false 则表示不做处理, 原样返回 return !returnType.getParameterType().isAssignableFrom(R.class)&amp;amp;&amp;amp; !returnType.hasMethodAnnotation(ApiResult.Disable.class); } @Override public Object beforeBodyWrite(Object body, MethodParameter returnType, MediaType selectedContentType, Class&amp;lt;?</description></item><item><title>[笔记]SpringBoot学习05</title><link>https://chaosalphard.github.io/p/%E7%AC%94%E8%AE%B0springboot%E5%AD%A6%E4%B9%A005/</link><pubDate>Fri, 19 Oct 2018 08:52:40 +0000</pubDate><guid>https://chaosalphard.github.io/p/%E7%AC%94%E8%AE%B0springboot%E5%AD%A6%E4%B9%A005/</guid><description>使用JUnit进行单元测试 生成测试类 在需要进行测试的类中 点击右键-&amp;gt;Go To-&amp;gt;Test 或者 使用快捷键Ctrl+Shift+T生成测试类
生成的类
public class CustomDaoTest { @Resource private CustomDao dao; @Test public void findCustomByName() { } @Test public void findCustomByID() { } } 添加测试
@SpringBootTest @RunWith(SpringRunner.class) public class CustomDaoTest { @Resource private CustomDao dao; @Test public void findCustomByName() { Custom c = dao.findCustomByName(&amp;#34;Ilirus&amp;#34;); assertEquals(c.getId(),1); } @Test public void findCustomByID() { Custom c = dao.findCustomByID(1); assertEquals(c.getId(),1); } }</description></item><item><title>[笔记]SpringBoot学习04</title><link>https://chaosalphard.github.io/p/%E7%AC%94%E8%AE%B0springboot%E5%AD%A6%E4%B9%A004/</link><pubDate>Tue, 16 Oct 2018 09:10:46 +0000</pubDate><guid>https://chaosalphard.github.io/p/%E7%AC%94%E8%AE%B0springboot%E5%AD%A6%E4%B9%A004/</guid><description>Spring打包和自定义日志 Spring打包 jar包 View-&amp;gt;Tool Windows-&amp;gt;Maven Project
展开Lifecycle
右键package
Run Maven Build
在target文件夹中找到打包出来的.jar文件
使用java -jar &amp;lt;jarName&amp;gt; 命令启动
war包 修改pom.xml &amp;lt;packaging&amp;gt;jar&amp;lt;/packaging&amp;gt; 改为 &amp;lt;packaging&amp;gt;war&amp;lt;/packaging&amp;gt;
SpringBootApplication类 改为
public class ClassName extends SpringBootServletInitializer { @Override protected SpringApplicationBuilder configure(SpringApplicationBuilder builder){ return builder.sources(ClassName.class); } public static void main(String[] args) { SpringApplication.run(ClassName.class, args); } } 再按照打包jar的方式打包
日志 定义log变量
import org.apache.commons.logging.Log
private Log log = LogFactory.getLog(className.class);
输出log
log.debug(&amp;#34;输出debug信息&amp;#34;) log.info(&amp;#34;输出信息&amp;#34;); log.warn(&amp;#34;输出警告&amp;#34;); log.error(&amp;#34;输出错误&amp;#34;) log.fatal(&amp;#34;输出致命错误&amp;#34;)</description></item><item><title>[笔记]SpringBoot学习03</title><link>https://chaosalphard.github.io/p/%E7%AC%94%E8%AE%B0springboot%E5%AD%A6%E4%B9%A003/</link><pubDate>Fri, 28 Sep 2018 10:23:40 +0000</pubDate><guid>https://chaosalphard.github.io/p/%E7%AC%94%E8%AE%B0springboot%E5%AD%A6%E4%B9%A003/</guid><description>Thymeleaf网页模板 使用 控制器方法中添加Model
//import org.springframework.ui.Model; @RequestMapping(value = {&amp;#34;&amp;#34;}) private String DefPage(Model model){ String name = &amp;#34;Ilirus&amp;#34;; model.addAttribute(&amp;#34;name&amp;#34;,name); return &amp;#34;def&amp;#34;; } HTML中引入命名空间之后使用
&amp;lt;html xmlns:th=&amp;#34;http://www.thymeleaf.org&amp;#34;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34;&amp;gt; &amp;lt;title&amp;gt;Title&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;a href=&amp;#34;#&amp;#34; th:text=&amp;#34;${name}&amp;#34;&amp;gt;被替换的文本&amp;lt;/a&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; 语法 替换文本 &amp;lt;div th:text=&amp;quot;'替换: '+${name}&amp;quot;&amp;gt;被替换的文本&amp;lt;/div&amp;gt; 替换href &amp;lt;a th:href=&amp;quot;@{'localhost:8080/'+${url}}&amp;quot;&amp;gt;&amp;lt;/a&amp;gt; 循环遍历 &amp;lt;div th:each=&amp;#34;li:${list}&amp;#34;&amp;gt; &amp;lt;a th:href=&amp;#34;@{&amp;#39;localhost:8080/&amp;#39;+${li.url}}&amp;#34; th:text=&amp;#34;${li.text}&amp;#34;&amp;gt;&amp;lt;/a&amp;gt; &amp;lt;/div&amp;gt; 引入模板 定义模板 &amp;lt;th:block th:fragment=&amp;quot;domblock&amp;quot;&amp;gt;Dom Element here&amp;lt;/th:block&amp;gt; &amp;lt;div th:fragment=&amp;quot;nav&amp;quot;&amp;gt;Dom Element here&amp;lt;/div&amp;gt; 引入模板 &amp;lt;th:block th:insert=&amp;quot;path/file::domblock&amp;quot;&amp;gt;&amp;lt;/th:block&amp;gt; &amp;lt;div th:insert=&amp;quot;path/file::nav&amp;quot;&amp;gt;&amp;lt;/div&amp;gt; th:insert th:replace th:include 使用webjar引入bootsrtap 在http://mvnrepository.</description></item><item><title>[笔记]SpringBoot学习02</title><link>https://chaosalphard.github.io/p/%E7%AC%94%E8%AE%B0springboot%E5%AD%A6%E4%B9%A002/</link><pubDate>Thu, 20 Sep 2018 11:34:24 +0000</pubDate><guid>https://chaosalphard.github.io/p/%E7%AC%94%E8%AE%B0springboot%E5%AD%A6%E4%B9%A002/</guid><description>使用JPA来链接数据库 环境配置:
JDK: Java 8
IDE: Intellij IDEA
服务器: Tomcat 9
创建JPA项目 Create Project -&amp;gt; Spring Initializr 选择JDK 选择Initializr Service URL (https://start.spring.io) 选择插件 Core -&amp;gt; DevTools Web -&amp;gt; web Template Engines -&amp;gt; Thymeleaf SQL -&amp;gt; JPA, MySQL 完成 配置JPA项目 配置application.properties文件 application.properties 中配置数据库链接
spring.jpa.database=mysql spring.datasource.url=jdbc:mysql://localhost:3306/java1604 spring.datasource.username=java1604 spring.datasource.password=java1604 spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl 添加数据库链接 View -&amp;gt; Tool Windows -&amp;gt; Database -&amp;gt; 添加Data Source
添加Hibernate配置文件 File -&amp;gt; Project Structure -&amp;gt; Modules 添加Hibernate框架 添加hibernate.</description></item><item><title>[笔记]SpringBoot学习01</title><link>https://chaosalphard.github.io/p/%E7%AC%94%E8%AE%B0springboot%E5%AD%A6%E4%B9%A001/</link><pubDate>Tue, 11 Sep 2018 10:08:00 +0000</pubDate><guid>https://chaosalphard.github.io/p/%E7%AC%94%E8%AE%B0springboot%E5%AD%A6%E4%B9%A001/</guid><description>Spring学习笔记 环境配置:
JDK: Java 8
IDE: Intellij IDEA
服务器: Tomcat 9
在IDEA中创建Spring项目 Create Project -&amp;gt; Spring Initializr 选择JDK 选择Initializr Service URL (https://start.spring.io) 选择插件 Core -&amp;gt; DevTools Web -&amp;gt; web Template Engines -&amp;gt; Thymeleaf 完成 创建Controller来控制地址映射 创建容纳Controller的包和类 添加注解@Controller 添加路径映射@RequestMapping @Controller //此路径将作为此类里面所有方法的根目录 @RequestMapping(value = {&amp;#34;/home&amp;#34;}) public class HomePage {} 添加方法 @Controller @RequestMapping(value = {&amp;#34;/home&amp;#34;}) public class HomePage { //此路径作为此方法的映射路径 @RequestMapping(value = {&amp;#34;/page&amp;#34;}) public String Page1(){ //此处return的字符串即为templates文件夹下的html文件名 return &amp;#34;p1&amp;#34;; } } 创建模板 在resources/templates/文件夹下创建html文件, 文件名与方法中return的值相同 启动服务器 在浏览器地址栏输入localhost:8080/home/page来访问页面 使用ResponseBody来进行内容输出 添加方法 添加@RequestMapping和@ResponseBody @Controller @RequestMapping(value = {&amp;#34;/home&amp;#34;}) public class HomePage { @RequestMapping(value = {&amp;#34;/res&amp;#34;}) @ResponseBody public String ResponseBody(){ String str = &amp;#34;ReturnResponseBodyText&amp;#34;; return str; } } 启动服务器 在浏览器地址栏输入localhost:8080/home/res来访问页面</description></item></channel></rss>