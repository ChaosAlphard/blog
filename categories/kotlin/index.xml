<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Kotlin on Ilirus</title><link>https://chaosalphard.github.io/categories/kotlin/</link><description>Recent content in Kotlin on Ilirus</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sat, 08 Dec 2018 20:02:20 +0000</lastBuildDate><atom:link href="https://chaosalphard.github.io/categories/kotlin/index.xml" rel="self" type="application/rss+xml"/><item><title>Kotlin学习笔记03</title><link>https://chaosalphard.github.io/p/kotlin%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B003/</link><pubDate>Sat, 08 Dec 2018 20:02:20 +0000</pubDate><guid>https://chaosalphard.github.io/p/kotlin%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B003/</guid><description>Kotlin中的类 类 伴生对象 由于Kotlin没有静态方法，在大多数情况下，官方建议简单地使用包级函数。
如果需要一个可以无需类实例来调用，但需要访问类内部的函数。
可以把它写成一个用companion修饰的对象内方法。
companion修饰的对象为伴生对象。
companion object { fun isEmpty(str: String): Boolean { return &amp;#34;&amp;#34; == str } } 单例类 伴生对象更多的用途是用来创建一个单例类。
如果只是简单的写法，直接用伴生对象返回一个val修饰的外部类对象就可以了，
但是更多的时候我们希望在类被调用的时候才去初始化他的对象。
以下代码将线程安全问题交给虚拟机在静态内部类加载时处理:
class Single private constructor() { companion object { fun get():Single{ return Holder.instance } } private object Holder { val instance = Single() } } 动态代理 Kotlin原生支持动态代理:
interface Animal{ fun bark() } class Dog :Animal { override fun bark() { println(&amp;#34;Wang Wang&amp;#34;) } } class Cat(animal: Animal) : Animal by animal { // .</description></item><item><title>Kotlin学习笔记02</title><link>https://chaosalphard.github.io/p/kotlin%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B002/</link><pubDate>Thu, 06 Dec 2018 15:08:02 +0000</pubDate><guid>https://chaosalphard.github.io/p/kotlin%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B002/</guid><description>Kotlin基本语法 变量、常量的定义 [修饰符] &amp;lt;var|val&amp;gt; &amp;lt;名称&amp;gt; : &amp;lt;类型&amp;gt; = &amp;lt;赋值&amp;gt;
//var 代表变量，可被更改 var age: Int = 18 //val 代表常量, 定义后不能被修改, 定义时必须赋值 val name: String = &amp;#34;Ilirus&amp;#34; 基本数据类型 var boolean:Boolean = false var char:Char = &amp;#39;a&amp;#39; var byte:Byte = 127 var short:Short = 32767 var int:Int = 2147483647 var long:Long = 9223372036854775807 var float:Float = 2.33f var double:Double = 3.1415926 类型检测与自动转换 fun getStrLength(o: Any): Int { if(o is String){ //进行类型判断后, o会自动被转换为String类型 return o.</description></item><item><title>Kotlin学习笔记01</title><link>https://chaosalphard.github.io/p/kotlin%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B001/</link><pubDate>Wed, 05 Dec 2018 16:43:44 +0000</pubDate><guid>https://chaosalphard.github.io/p/kotlin%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B001/</guid><description>Kotlin项目的创建 创建一个Kotlin项目 Create Project -&amp;gt; Kotlin 选择Kotlin/JVM 或者 Kotlin/JS 选择SDK 选择Library 创建包 创建.kt文件 在创建的.kt文件中写入以下代码，运行。
fun main(args: Array&amp;lt;String&amp;gt;){ println(&amp;#34;Hello Kotlin!&amp;#34;) } 使用Spring Boot + MyBatis 创建Web项目 Create Project -&amp;gt; Spring Initializr 选择Initializr Service URL (https://start.spring.io) Language 选择 Kotlin 选择插件 Core -&amp;gt; DevTools Web -&amp;gt; web Template Engines -&amp;gt; Thymeleaf SQL -&amp;gt; MySQL, MyBatis 完成 配置文件 使用application.properties文件或者application.yml文件皆可
这里我们使用application.yml文件，注意空格
spring:datasource:url:jdbc:mysql://localhost:3306/tieba?useSSL=false&amp;amp;serverTimezone=GMTusername:usrpassword:pwddriver-class-name:com.mysql.jdbc.Driver编写实体类 class User { var uid: Int?</description></item></channel></rss>