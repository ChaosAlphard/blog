<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Webpack on Ilirus</title><link>https://chaosalphard.github.io/categories/webpack/</link><description>Recent content in Webpack on Ilirus</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Mon, 05 Aug 2019 22:24:12 +0000</lastBuildDate><atom:link href="https://chaosalphard.github.io/categories/webpack/index.xml" rel="self" type="application/rss+xml"/><item><title>Webpack中CSS样式的处理</title><link>https://chaosalphard.github.io/p/webpack%E4%B8%ADcss%E6%A0%B7%E5%BC%8F%E7%9A%84%E5%A4%84%E7%90%86/</link><pubDate>Mon, 05 Aug 2019 22:24:12 +0000</pubDate><guid>https://chaosalphard.github.io/p/webpack%E4%B8%ADcss%E6%A0%B7%E5%BC%8F%E7%9A%84%E5%A4%84%E7%90%86/</guid><description>CSS样式的处理 安装css-loader和style-loader
yarn add css-loader style-loader -D 在index.js中引入.css文件
require(&amp;#39;./index.css&amp;#39;) 在webpack.config.js中配置css模块
module.exports = { mode: &amp;#39;development&amp;#39;, entry: &amp;#39;./src/index.js&amp;#39;, output: { filename: &amp;#39;bundle.[hash:4].js&amp;#39;, path: path.resolve(__dirname, &amp;#39;dist&amp;#39;) }, devServer: { // ... }, plugins: [ // ... ], // 模块 module: { // 规则 rules: [ { // 匹配.css 结尾的文件 test: /\.css$/, // 可用字符串, 也可用对象 // loader的顺序默认是从 右往左/下到上 执行 // css-loader, 解析@import语法 // style-loader, 把css 插入到head标签中 use: [ { loader: &amp;#39;style-loader&amp;#39;, options: { // 在顶部插入 insertAt: &amp;#39;top&amp;#39; } }, &amp;#39;css-loader&amp;#39; ] }, {// 也可以处理less文件 test: /\.</description></item><item><title>Webpack配置HTML Template</title><link>https://chaosalphard.github.io/p/webpack%E9%85%8D%E7%BD%AEhtml-template/</link><pubDate>Sat, 03 Aug 2019 19:25:57 +0000</pubDate><guid>https://chaosalphard.github.io/p/webpack%E9%85%8D%E7%BD%AEhtml-template/</guid><description>Webpack配置HTML template 安装html-webpack-plugin
yarn add html-webpack-plugin -D :: or npm install html-webpack-plugin -D 配置webpack
// 引入html-webpack-plugin模块 const HtmlWebpackPlugin = require(&amp;#39;html-webpack-plugin&amp;#39;) module.exports = { mode: &amp;#39;development&amp;#39;, entry: &amp;#39;./src/index.js&amp;#39;, output: { // bundle.[hash].js: 给打包的文件追加hash // 可指定长度: [hash:&amp;lt;length&amp;gt;] filename: &amp;#39;bundle.[hash:4].js&amp;#39;, path: path.resolve(__dirname, &amp;#39;dist&amp;#39;) }, devServer: { port: 3000, progress: true, contentBase: &amp;#39;./dev&amp;#39;, compress: true }, // 插件 plugins: [ new HtmlWebpackPlugin({ // 模版文件路径 template: &amp;#39;./src/index.html&amp;#39;, // 打包后的文件名字 filename: &amp;#39;index.</description></item><item><title>Webpack的安装与配置</title><link>https://chaosalphard.github.io/p/webpack%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</link><pubDate>Fri, 21 Jun 2019 23:22:15 +0000</pubDate><guid>https://chaosalphard.github.io/p/webpack%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</guid><description>webpack 是一个现代 JavaScript 应用程序的静态模块打包器(module bundler)。当 webpack 处理应用程序时，它会递归地构建一个依赖关系图(dependency graph)，其中包含应用程序需要的每个模块，然后将所有这些模块打包成一个或多个 bundle。
安装Webpack :: 初始化 yarn init :: 安装webpack 和 webpack-cli :: -D表示是开发依赖, 上线时不需要 yarn add webpack webpack-cli -D 配置Webpack 从 Webpack v4.0.0 开始，可以不用引入配置文件。然而，webpack 仍然还是高度可配置的。
Webpack 默认配置文件名为 webpack.config.js或webpackfile.js。
也可以在启动时使用 &amp;ndash;config 参数指定配置文件名称
// 引入path模块 (自带, 无需安装) const path = require(&amp;#39;path&amp;#39;) // 导出配置模块 module.exports = { // 打包模式 默认有两种 production|development // production: 生产模式 // development: 开发模式 mode: &amp;#39;development&amp;#39;, // 入口文件 entry: &amp;#39;.</description></item></channel></rss>