<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>OAuth on Ilirus</title><link>https://chaosalphard.github.io/categories/oauth/</link><description>Recent content in OAuth on Ilirus</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sat, 11 Apr 2020 22:52:26 +0000</lastBuildDate><atom:link href="https://chaosalphard.github.io/categories/oauth/index.xml" rel="self" type="application/rss+xml"/><item><title>OAuth2.0资源服务器搭建与配置</title><link>https://chaosalphard.github.io/p/oauth2.0%E8%B5%84%E6%BA%90%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA%E4%B8%8E%E9%85%8D%E7%BD%AE/</link><pubDate>Sat, 11 Apr 2020 22:52:26 +0000</pubDate><guid>https://chaosalphard.github.io/p/oauth2.0%E8%B5%84%E6%BA%90%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA%E4%B8%8E%E9%85%8D%E7%BD%AE/</guid><description>OAuth2.0资源服务器搭建 引入依赖 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-cloud-starter-security&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-cloud-starter-oauth2&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; 编写配置文件 SecurityConfig.java
@Configuration @EnableWebSecurity @EnableGlobalMethodSecurity(prePostEnabled = true) public class SecurityConfig extends WebSecurityConfigurerAdapter { @Override protected void configure(HttpSecurity http) throws Exception { http.authorizeRequests() .antMatchers(&amp;#34;/res/**&amp;#34;) // 需要通过验证 .authenticated() .anyRequest().permitAll() .and().csrf().disable(); } } ResourceServerConfig.java
@Configuration @EnableResourceServer public class ResourceServerConfig extends ResourceServerConfigurerAdapter { @Autowired private TokenStore tokenStore; @Override public void configure(ResourceServerSecurityConfigurer resources) throws Exception { resources.resourceId(&amp;#34;res1&amp;#34;) // 资源id, 需要与ClientDetailsServiceConfigurer中的resourceIds一致 .tokenServices(tokenService()) // 验证令牌服务 .</description></item><item><title>OAuth2.0授权服务器搭建与配置</title><link>https://chaosalphard.github.io/p/oauth2.0%E6%8E%88%E6%9D%83%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA%E4%B8%8E%E9%85%8D%E7%BD%AE/</link><pubDate>Thu, 09 Apr 2020 01:00:25 +0000</pubDate><guid>https://chaosalphard.github.io/p/oauth2.0%E6%8E%88%E6%9D%83%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA%E4%B8%8E%E9%85%8D%E7%BD%AE/</guid><description>OAuth2.0授权服务器搭建 向pom.xml中添加以下依赖
&amp;lt;dependencies&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-cloud-starter-security&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-cloud-starter-oauth2&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;/dependencies&amp;gt; 配置client端的详情信息
@Configuration @EnableAuthorizationServer public class AuthorizationServerConfig extends AuthorizationServerConfigurerAdapter { // 配置客户端详情信息 @Override public void configure(ClientDetailsServiceConfigurer clients) throws Exception { clients.inMemory() // inMemory: 使用内存方式 // 客户端ID .withClient(&amp;#34;c1&amp;#34;) // 客户端密钥, 加密方式需要与SpringSecurity中的方式一致 .secret(new BCryptPasswordEncoder().encode(&amp;#34;secret&amp;#34;)) // 客户端可以访问的资源列表 .resourceIds(&amp;#34;res1&amp;#34;) // 允许的授权类型 .authorizedGrantTypes(&amp;#34;authorization_code&amp;#34;, &amp;#34;password&amp;#34;, &amp;#34;client_credentials&amp;#34;, &amp;#34;implicit&amp;#34;, &amp;#34;refresh_token&amp;#34;) // 允许的授权范围 .scopes(&amp;#34;all&amp;#34;) // 自动授权, 如果是授权码模式, 且设置为false, 则会跳转到授权页面 .autoApprove(false) // 授权成功后重定向地址, 授权成功后会在该地址后附带上授权码 .</description></item><item><title>OAuth2.0简介</title><link>https://chaosalphard.github.io/p/oauth2.0%E7%AE%80%E4%BB%8B/</link><pubDate>Tue, 07 Apr 2020 03:14:56 +0000</pubDate><guid>https://chaosalphard.github.io/p/oauth2.0%E7%AE%80%E4%BB%8B/</guid><description>什么是OAuth OAuth(开放授权)是一个开放标准，允许用户让第三方应用访问该用户在某一网站上存储的私密的资源(如照片，视频，联系人列表)，而无需将用户名和密码提供给第三方应用。
举个例子: 用户借助QQ认证去登录网站A，如果认证通过了，就不需要用户手动在网站A注册账户了。
那么怎么样才算认证通过？网站A成功从QQ获取用户信息则认为认证成功了。那么如何从QQ那里获取用户的身份信息呢？用户信息的拥有者是用户本人，QQ需要经过用户同意才可以为网站A生成令牌，而网站A拿到此令牌才可从QQ获取用户信息。
OAuth的思路 OAuth在&amp;quot;第三方应用程序&amp;quot;与&amp;quot;服务提供商&amp;quot;之间，设置了一个授权层(authorization layer)。&amp;ldquo;第三方应用程序&amp;quot;不能直接登录&amp;quot;服务提供商&amp;rdquo;，只能登录授权层，以此将用户与第三方应用程序区分开来。&amp;ldquo;第三方应用程序&amp;quot;登录授权层所用的令牌(token)，与用户的密码不同。用户可以在登录的时候，指定授权层令牌的权限范围和有效期。
&amp;ldquo;第三方应用程序&amp;quot;登录授权层以后，&amp;ldquo;服务提供商&amp;quot;根据令牌的权限范围和有效期，向&amp;quot;第三方应用程序&amp;quot;开放用户储存的资料。
运行流程 Third-party application: 第三方应用程序，也可称为&amp;quot;客户端&amp;rdquo;，即例子中的&amp;quot;网站A&amp;rdquo;。它本身不储存资源，需要通过资源所有者的授权去请求资源服务器的资源。 HTTP service: HTTP服务提供商，即例子中的QQ。 Resource Owner: 资源所有者，也就是用户。 User Agent: 用户代理，一般是指浏览器。 Authorization server: 认证服务器，即服务提供商用来处理认证的服务器，用于服务提供商对资源拥有者的身份进行认证、对资源访问进行授权、认证成功后给客户端发放令牌(Access Token, 客户端访问资源服务器的凭据)。 Resource server: 资源服务器，即服务提供商存放用户资源的服务器。 认证服务器与资源服务器，它们可以是同一台服务器，也可以是不同的服务器。
运行流程
用户打开第三方应用程序以后，第三方应用程序要求用户给予授权。 用户同意给予第三方应用程序授权。 第三方应用程序使用上一步获得的授权，向认证服务器申请令牌。 认证服务器对第三方应用程序进行认证以后，确认无误，同意发放令牌。 第三方应用程序使用令牌，向资源服务器申请获取资源。 资源服务器确认令牌无误，同意向第三方应用程序开放资源。 第三方应用程序拿到资源后，即可得知认证通过。 参考:
理解Oauth2.0 一图搞定OAuth2.0</description></item></channel></rss>